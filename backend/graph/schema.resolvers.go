package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"backend_qualitytrace/graph/model"
	"context"
	"fmt"
)

// CreateIngredient is the resolver for the createIngredient field.
func (r *mutationResolver) CreateIngredient(ctx context.Context, input model.CreateIngredientInput) (*model.Ingredient, error) {
	panic(fmt.Errorf("not implemented: CreateIngredient - createIngredient"))
}

// UpdateIngredient is the resolver for the updateIngredient field.
func (r *mutationResolver) UpdateIngredient(ctx context.Context, id string, input model.UpdateIngredientInput) (*model.Ingredient, error) {
	panic(fmt.Errorf("not implemented: UpdateIngredient - updateIngredient"))
}

// DeleteIngredient is the resolver for the deleteIngredient field.
func (r *mutationResolver) DeleteIngredient(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteIngredient - deleteIngredient"))
}

// Ingredients is the resolver for the ingredients field.
func (r *queryResolver) Ingredients(ctx context.Context) ([]*model.Ingredient, error) {
	panic(fmt.Errorf("not implemented: Ingredients - ingredients"))
}

// Ingredient is the resolver for the ingredient field.
func (r *queryResolver) Ingredient(ctx context.Context, id string) (*model.Ingredient, error) {
	panic(fmt.Errorf("not implemented: Ingredient - ingredient"))
}

// Suppliers is the resolver for the suppliers field.
func (r *queryResolver) Suppliers(ctx context.Context) ([]*model.Supplier, error) {
	var suppliers []*model.Supplier
	dummySupplier := model.Supplier{
		Name: "EggySupplier",
		Email: "eggy@outlook.com",
	}
	suppliers = append(suppliers, &dummySupplier)
	return suppliers, nil
}

// Supplier is the resolver for the supplier field.
func (r *queryResolver) Supplier(ctx context.Context, id string) (*model.Supplier, error) {
	panic(fmt.Errorf("not implemented: Supplier - supplier"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// IngredientsReceived is the resolver for the ingredientsReceived field.
func (r *queryResolver) IngredientsReceived(ctx context.Context) ([]*model.IngredientReceived, error) {
	panic(fmt.Errorf("not implemented: IngredientsReceived - ingredientsReceived"))
}

// IngredientReceived is the resolver for the ingredientReceived field.
func (r *queryResolver) IngredientReceived(ctx context.Context, id string) (*model.IngredientReceived, error) {
	panic(fmt.Errorf("not implemented: IngredientReceived - ingredientReceived"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
